[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "azlin"
version = "2.0.0"
description = "Azure VM fleet management CLI - provision, manage, and monitor development VMs"
requires-python = ">=3.11"
authors = [
    {name = "Ryan Sweet", email = "rysweet@microsoft.com"},
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["azure", "vm", "cli", "devops", "cloud", "provisioning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dependencies = [
    "anthropic>=0.40.0",
    "azure-core>=1.29.0",
    "azure-identity>=1.15.0",
    "azure-mgmt-resource>=23.0.0",
    "click>=8.1.0",
    "cryptography>=41.0.0",
    "pyyaml>=6.0.0",
    "rich>=13.7.0",
    "tomli>=2.0.0; python_version < '3.11'",
    "tomli-w>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pre-commit>=3.5.0",
    "pyright>=1.1.350",
    "ruff>=0.1.0",
]

[project.scripts]
azlin = "azlin.cli:main"
azdoit = "azlin.cli:azdoit_main"

[tool.hatch.build.targets.wheel]
packages = ["src/azlin"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast)",
    "integration: Integration tests (medium)",
    "e2e: End-to-end tests (slow, expensive)",
    "tdd_red: Tests expected to fail in TDD RED phase (pre-implementation)",
    "syntax: Syntax validation tests",
    "command_new: Tests for 'azlin new' command",
    "command_list: Tests for 'azlin list' command",
    "command_connect: Tests for 'azlin connect' command",
]
addopts = "-ra -q"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pyright]
typeCheckingMode = "standard"  # Upgraded from "basic" for better type safety
pythonVersion = "3.11"
venvPath = "."
venv = ".venv"
include = ["src"]
exclude = ["**/__pycache__", "**/.pytest_cache", "**/node_modules"]
# Enable important type checks (previously all disabled)
reportUnknownParameterType = "warning"  # Catch parameter type issues
reportUnknownVariableType = "warning"  # Catch variable type issues
reportUnknownMemberType = false  # Keep disabled (too noisy with Azure SDK)
reportUnknownArgumentType = false  # Keep disabled (too noisy with Azure SDK)
reportMissingTypeStubs = false  # Keep disabled (external libraries)
reportOptionalMemberAccess = "warning"  # Catch potential None access bugs

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "W",    # pycodestyle warnings
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "C4",   # flake8-comprehensions
    "S",    # flake8-bandit (security)
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "PT",   # flake8-pytest-style
    "C90",  # mccabe complexity
    "PERF", # perflint
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "S101",   # Use of assert (needed for pytest)
    "S603",   # subprocess untrusted input (intentional in CLI)
    "S607",   # partial executable path (intentional in CLI)
    "S110",   # try-except-pass (intentional in some cases)
    "B007",   # Loop variable not used (intentional in some cases)
    "F841",   # Local variable assigned but never used (intentional scaffolding)
    "PERF102", # Use .values() instead of .items() (prefer clarity/debugging)
    "RUF012", # Mutable class attributes (intentional class constants)
    "RUF043", # pytest.raises match= patterns (intentional regex in tests)
    "PT012",  # pytest.raises() multiple statements (intentional in integration tests)
    "SIM103", # Return condition directly (prefer clarity)
    "SIM117", # Combine with statements (prefer clarity in tests)
    "RET504", # Unnecessary assignment before return (prefer clarity)
    "RUF059", # Unpacked variable not used (intentional in unpacking)
    "C901",   # Complex function (intentional in some cases)
]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # assert allowed in tests
    "S108",   # hardcoded /tmp allowed in tests
    "PT009",  # pytest unittest style
    "PT027",  # pytest unittest raises
]
"**/tests/**/*.py" = [
    "S101",   # assert allowed in tests
    "S108",   # hardcoded /tmp allowed in tests
]
".claude/**/*.py" = [
    "S101",   # assert allowed
    "T201",   # print allowed
]
"src/azlin/vm_provisioning.py" = [
    "S608",   # False positive: cloud-init YAML, not SQL
]
"src/azlin/agentic/strategies/base_strategy.py" = [
    "B027",   # Empty method in ABC - intentionally optional to override
]
"src/azlin/cli.py" = [
    "S602",   # subprocess shell=True needed for diagnostic command piping - input is trusted
]

[tool.bandit]
exclude_dirs = ["tests", "*/tests/*"]
skips = ["B108"]  # Allow hardcoded /tmp in test files
