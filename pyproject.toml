[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "azlin"
version = "2.0.0"
description = "Azure VM fleet management CLI - provision, manage, and monitor development VMs"
requires-python = ">=3.11"
authors = [
    {name = "Ryan Sweet", email = "rysweet@microsoft.com"},
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["azure", "vm", "cli", "devops", "cloud", "provisioning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dependencies = [
    "click>=8.1.0",
    "pyyaml>=6.0.0",
    "rich>=13.7.0",
    "tomli>=2.0.0; python_version < '3.11'",
    "tomli-w>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pre-commit>=3.5.0",
    "pyright>=1.1.350",
    "ruff>=0.1.0",
]

[project.scripts]
azlin = "azlin.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/azlin"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast)",
    "integration: Integration tests (medium)",
    "e2e: End-to-end tests (slow, expensive)",
]
addopts = "-ra -q"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pyright]
typeCheckingMode = "basic"
pythonVersion = "3.11"
include = ["src"]
exclude = ["**/__pycache__", "**/.pytest_cache", "**/node_modules"]
reportMissingTypeStubs = false
reportOptionalMemberAccess = false

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "W",    # pycodestyle warnings
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "C4",   # flake8-comprehensions
    "S",    # flake8-bandit (security)
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "PT",   # flake8-pytest-style
    "C90",  # mccabe complexity
    "PERF", # perflint
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "S101",   # Use of assert (needed for pytest)
    "S603",   # subprocess untrusted input (intentional in CLI)
    "S607",   # partial executable path (intentional in CLI)
]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # assert allowed in tests
    "PT009",  # pytest unittest style
    "PT027",  # pytest unittest raises
]
".claude/**/*.py" = [
    "S101",   # assert allowed
    "T201",   # print allowed
]
