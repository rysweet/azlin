name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.5.11"

jobs:
  # Fast checks that run in parallel for quick feedback
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install dependencies
        run: |
          uv pip install --system pre-commit
          uv pip install --system -e ".[dev]"

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure
        env:
          SKIP: pyright  # Type checking in separate job

  type-check:
    name: Type Checking (Pyright)
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install dependencies
        run: |
          uv pip install --system -e ".[dev]"

      - name: Run Pyright
        run: |
          uv pip install --system pyright
          pyright src/

  # Comprehensive test suite
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for coverage

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Cache pytest
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: pytest-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pytest-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          uv pip install --system -e ".[dev]"

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit \
            --cov=src/azlin \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --junitxml=junit/test-results-${{ matrix.python-version }}.xml \
            -v
        env:
          COVERAGE_FILE: .coverage.${{ matrix.python-version }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.python-version == '3.13'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: junit/test-results-*.xml
          retention-days: 30

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.13'
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  # Coverage check with clear failure message
  coverage-check:
    name: Coverage Check (80% minimum)
    runs-on: ubuntu-24.04
    needs: test
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: Check coverage threshold
        run: |
          # Extract coverage percentage from coverage.xml
          COVERAGE=$(python3 -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100
          print(f'{coverage:.2f}')
          ")

          echo "Current coverage: $COVERAGE%"

          # Check if coverage meets threshold
          THRESHOLD=80
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below threshold $THRESHOLD%"
            echo "Please add tests to increase coverage."
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets threshold $THRESHOLD%"
          fi

  # Integration tests (can be expensive, run only on main branch merges)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install dependencies
        run: |
          uv pip install --system -e ".[dev]"

      - name: Run integration tests
        run: |
          pytest tests/ \
            -v \
            -m integration \
            --junitxml=junit/integration-test-results.xml
        continue-on-error: true  # Integration tests may fail due to Azure quota/permissions

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: junit/integration-test-results.xml
          retention-days: 30

  # All checks must pass
  all-checks:
    name: All CI Checks Passed
    runs-on: ubuntu-24.04
    needs: [pre-commit, type-check, test, coverage-check]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.pre-commit.result }}" != "success" ]]; then
            echo "❌ Pre-commit checks failed"
            exit 1
          fi
          if [[ "${{ needs.type-check.result }}" != "success" ]]; then
            echo "❌ Type checking failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [[ "${{ needs.coverage-check.result }}" != "success" ]]; then
            echo "❌ Coverage check failed"
            exit 1
          fi
          echo "✅ All CI checks passed!"
