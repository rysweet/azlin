"""Unit tests for objective state persistence.

Tests persistent goal tracking across sessions:
- State serialization/deserialization
- File-based storage (~/.azlin/objectives/)
- State transitions (pending → in_progress → completed/failed)
- Execution history tracking
- State recovery after crashes

Coverage Target: 60% unit tests
"""

import json
import pytest
from pathlib import Path
from datetime import datetime

from azlin.agentic.objective_manager import ObjectiveManager
from azlin.agentic.types import Intent, ObjectiveStatus


# ============================================================================
# State Manager Initialization Tests
# ============================================================================


class TestObjectiveManagerInitialization:
    """Test state manager initialization."""

    def test_initialize_with_default_dir(self, temp_objectives_dir):
        """Test initializing state manager with default objectives directory."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        assert manager is not None
        assert manager.objectives_dir == temp_objectives_dir

    def test_create_objectives_dir_if_missing(self, temp_config_dir):
        """Test automatically creating objectives directory if it doesn't exist."""
        

        objectives_dir = temp_config_dir / "objectives"
        assert not objectives_dir.exists()

        manager = ObjectiveManager(objectives_dir=objectives_dir)

        assert objectives_dir.exists()


# ============================================================================
# Objective Creation Tests
# ============================================================================


class TestObjectiveCreation:
    """Test creating and saving new objectives."""

    def test_create_new_objective(self, temp_objectives_dir):
        """Test creating new objective with generated ID."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create(
            natural_language="Create an AKS cluster with 3 nodes",
            parsed_intent={
                "intent": "provision_aks",
                "parameters": {"cluster_name": "test-aks", "node_count": 3},
            },
        )

        assert objective["id"].startswith("obj_")
        assert objective["status"] == "pending"
        assert objective["natural_language"] == "Create an AKS cluster with 3 nodes"

    def test_objective_id_format(self, temp_objectives_dir):
        """Test objective ID format: obj_YYYYMMDD_NNN."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create(
            natural_language="Test objective", parsed_intent={"intent": "test"}
        )

        # Format: obj_20251020_001
        assert objective["id"].startswith("obj_")
        parts = objective["id"].split("_")
        assert len(parts) == 3
        assert len(parts[1]) == 8  # YYYYMMDD
        assert parts[2].isdigit()  # Sequential number

    def test_save_objective_to_file(self, temp_objectives_dir):
        """Test saving objective state to JSON file."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create(
            natural_language="Test", parsed_intent={"intent": "test"}
        )

        objective_file = temp_objectives_dir / f"{objective['id']}.json"
        assert objective_file.exists()

        # Verify file content
        with open(objective_file) as f:
            saved_data = json.load(f)
        assert saved_data["id"] == objective["id"]


# ============================================================================
# State Loading Tests
# ============================================================================


class TestStateLoading:
    """Test loading objective states from disk."""

    def test_load_objective_by_id(self, temp_objectives_dir, sample_objective_state):
        """Test loading objective by ID."""
        

        # Save sample state
        objective_file = temp_objectives_dir / f"{sample_objective_state['id']}.json"
        with open(objective_file, "w") as f:
            json.dump(sample_objective_state, f)

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)
        objective = manager.load(sample_objective_state["id"])

        assert objective["id"] == sample_objective_state["id"]
        assert objective["status"] == "in_progress"

    def test_load_nonexistent_objective(self, temp_objectives_dir):
        """Test loading nonexistent objective raises error."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        with pytest.raises(FileNotFoundError, match="Objective not found"):
            manager.load("obj_nonexistent")

    def test_list_all_objectives(self, temp_objectives_dir, sample_objective_state):
        """Test listing all objectives."""
        

        # Create multiple objectives
        for i in range(3):
            objective_file = temp_objectives_dir / f"obj_20251020_{i:03d}.json"
            with open(objective_file, "w") as f:
                json.dump({**sample_objective_state, "id": f"obj_20251020_{i:03d}"}, f)

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)
        objectives = manager.list_objectives()

        assert len(objectives) == 3

    def test_list_objectives_by_status(self, temp_objectives_dir):
        """Test filtering objectives by status."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        # Create objectives with different statuses
        manager.create("Test 1", {"intent": "test1"}, status="pending")
        manager.create("Test 2", {"intent": "test2"}, status="in_progress")
        manager.create("Test 3", {"intent": "test3"}, status="completed")

        in_progress = manager.list_objectives(status="in_progress")
        assert len(in_progress) == 1
        assert in_progress[0]["status"] == "in_progress"


# ============================================================================
# State Update Tests
# ============================================================================


class TestStateUpdates:
    """Test updating objective state."""

    def test_update_objective_status(self, temp_objectives_dir):
        """Test updating objective status."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})
        assert objective["status"] == "pending"

        manager.update(objective["id"], "in_progress")

        updated = manager.load(objective["id"])
        assert updated["status"] == "in_progress"

    def test_append_execution_history(self, temp_objectives_dir):
        """Test appending to execution history."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})

        manager.append_history(
            objective["id"],
            {
                "timestamp": datetime.now().isoformat(),
                "action": "strategy_selected",
                "details": {"strategy": "azure_cli"},
            },
        )

        updated = manager.load(objective["id"])
        assert len(updated["execution_history"]) == 1
        assert updated["execution_history"][0]["action"] == "strategy_selected"

    def test_update_multiple_fields(self, temp_objectives_dir):
        """Test updating multiple fields atomically."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})

        manager.update(
            objective["id"],
            status="in_progress",
            selected_strategy="terraform",
            cost_estimate=150.00,
        )

        updated = manager.load(objective["id"])
        assert updated["status"] == "in_progress"
        assert updated["selected_strategy"] == "terraform"
        assert updated["cost_estimate"] == 150.00

    def test_auto_update_timestamp(self, temp_objectives_dir):
        """Test updated_at timestamp is automatically updated."""
        
        import time

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})
        original_timestamp = objective["updated_at"]

        time.sleep(0.1)
        manager.update(objective["id"], "in_progress")

        updated = manager.load(objective["id"])
        assert updated["updated_at"] != original_timestamp


# ============================================================================
# State Transition Tests
# ============================================================================


class TestStateTransitions:
    """Test valid state transitions."""

    def test_valid_transition_pending_to_in_progress(self, temp_objectives_dir):
        """Test valid transition: pending → in_progress."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})
        manager.update(objective["id"], "in_progress")

        assert manager.load(objective["id"])["status"] == "in_progress"

    def test_valid_transition_in_progress_to_completed(self, temp_objectives_dir):
        """Test valid transition: in_progress → completed."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})
        manager.update(objective["id"], "in_progress")
        manager.update(objective["id"], "completed")

        assert manager.load(objective["id"])["status"] == "completed"

    def test_invalid_transition_completed_to_pending(self, temp_objectives_dir):
        """Test invalid transition: completed → pending."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})
        manager.update(objective["id"], "completed")

        with pytest.raises(ValueError, match="Invalid state transition"):
            manager.update(objective["id"], "pending")

    def test_state_machine_diagram(self):
        """Test state machine has correct transitions defined."""
        

        manager = ObjectiveManager()

        valid_transitions = manager.get_valid_transitions()

        assert "pending" in valid_transitions
        assert "in_progress" in valid_transitions["pending"]
        assert "completed" in valid_transitions["in_progress"]
        assert "failed" in valid_transitions["in_progress"]


# ============================================================================
# Retry Tracking Tests
# ============================================================================


class TestRetryTracking:
    """Test retry count tracking."""

    def test_increment_retry_count(self, temp_objectives_dir):
        """Test incrementing retry count."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})
        assert objective["retry_count"] == 0

        manager.increment_retry(objective["id"])

        updated = manager.load(objective["id"])
        assert updated["retry_count"] == 1

    def test_max_retries_reached(self, temp_objectives_dir):
        """Test detecting max retries reached."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"}, max_retries=3)

        for _ in range(3):
            manager.increment_retry(objective["id"])

        assert manager.has_max_retries_reached(objective["id"]) is True

    def test_reset_retry_count(self, temp_objectives_dir):
        """Test resetting retry count after success."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})
        manager.increment_retry(objective["id"])
        manager.increment_retry(objective["id"])

        manager.reset_retry_count(objective["id"])

        updated = manager.load(objective["id"])
        assert updated["retry_count"] == 0


# ============================================================================
# State Recovery Tests
# ============================================================================


class TestStateRecovery:
    """Test state recovery after crashes."""

    def test_recover_in_progress_objectives(self, temp_objectives_dir):
        """Test recovering in_progress objectives after restart."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        # Create in_progress objectives
        obj1 = manager.create("Test 1", {"intent": "test1"}, status="in_progress")
        obj2 = manager.create("Test 2", {"intent": "test2"}, status="completed")

        # Simulate restart
        new_manager = ObjectiveManager(objectives_dir=temp_objectives_dir)
        recoverable = new_manager.recover_incomplete_objectives()

        assert len(recoverable) == 1
        assert recoverable[0]["id"] == obj1["id"]

    def test_mark_crashed_objectives(self, temp_objectives_dir):
        """Test marking objectives that were in progress during crash."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        obj = manager.create("Test", {"intent": "test"}, status="in_progress")

        # Simulate crash and recovery
        new_manager = ObjectiveManager(objectives_dir=temp_objectives_dir)
        new_manager.mark_crashed_objectives()

        recovered = new_manager.load(obj["id"])
        assert "crashed" in recovered
        assert recovered["crashed"] is True


# ============================================================================
# Serialization Tests
# ============================================================================


class TestSerialization:
    """Test state serialization and deserialization."""

    def test_serialize_datetime_fields(self, temp_objectives_dir):
        """Test datetime fields are serialized to ISO format."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})

        # Load raw JSON
        objective_file = temp_objectives_dir / f"{objective['id']}.json"
        with open(objective_file) as f:
            raw_data = json.load(f)

        # Datetime fields should be strings in ISO format
        assert isinstance(raw_data["created_at"], str)
        assert "T" in raw_data["created_at"]  # ISO 8601 format

    def test_deserialize_datetime_fields(self, temp_objectives_dir):
        """Test datetime strings are deserialized to datetime objects."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        objective = manager.create("Test", {"intent": "test"})
        loaded = manager.load(objective["id"])

        # When loaded with parse_dates=True, should be datetime
        from datetime import datetime

        assert isinstance(loaded["created_at"], (str, datetime))

    def test_handle_invalid_json(self, temp_objectives_dir):
        """Test handling corrupted JSON files."""
        

        # Create corrupted JSON file
        corrupted_file = temp_objectives_dir / "obj_corrupted.json"
        corrupted_file.write_text("{invalid json")

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        with pytest.raises(json.JSONDecodeError):
            manager.load("obj_corrupted")


# ============================================================================
# Boundary and Error Tests
# ============================================================================


class TestStatePersistenceBoundaries:
    """Test boundary conditions and error handling."""

    def test_empty_natural_language(self, temp_objectives_dir):
        """Test handling empty natural language input."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        with pytest.raises(ValueError, match="Natural language cannot be empty"):
            manager.create("", {"intent": "test"})

    def test_missing_intent_field(self, temp_objectives_dir):
        """Test handling missing intent in parsed_intent."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        with pytest.raises(ValueError, match="Missing required field: intent"):
            manager.create("Test", {"parameters": {}})

    def test_very_long_objective_text(self, temp_objectives_dir):
        """Test handling very long objective text."""
        

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)

        long_text = "Create VM " * 10000  # 100KB text
        objective = manager.create(long_text, {"intent": "test"})

        assert len(objective["natural_language"]) > 10000

    def test_concurrent_updates(self, temp_objectives_dir):
        """Test handling concurrent updates to same objective."""
        
        import threading

        manager = ObjectiveManager(objectives_dir=temp_objectives_dir)
        objective = manager.create("Test", {"intent": "test"})

        def update():
            manager.update(objective["id"], "in_progress")

        # Simulate concurrent updates
        threads = [threading.Thread(target=update_status) for _ in range(5)]
        for t in threads:
            t.start()
        for t in threads:
            t.join()

        # Should handle gracefully (last write wins or locking)
        final = manager.load(objective["id"])
        assert final["status"] == "in_progress"
