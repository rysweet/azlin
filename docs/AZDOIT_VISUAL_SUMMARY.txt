╔══════════════════════════════════════════════════════════════════════════╗
║                    AZDOIT ENHANCEMENT - API CONTRACTS                    ║
║                        PR #156 Enhancement Design                        ║
╚══════════════════════════════════════════════════════════════════════════╝

📦 DELIVERABLES
═══════════════════════════════════════════════════════════════════════════

📄 Documentation (7,761 lines total)
   ├── API_CONTRACTS_AZDOIT.md (2,594 lines) ⭐ MAIN CONTRACT
   ├── AZDOIT_ARCHITECTURE.md (634 lines)
   ├── AZDOIT_IMPLEMENTATION_GUIDE.md (1,060 lines)
   ├── AZDOIT_README.md (443 lines)
   ├── AZDOIT_CONTRACTS_SUMMARY.md (Executive Summary)
   └── Security docs (3,030 lines - pre-existing)

🏗️ MODULE STRUCTURE
═══════════════════════════════════════════════════════════════════════════

src/azlin/agentic/
├── 📘 intent_parser.py          [EXISTS] Natural language → Intent
├── 📘 command_executor.py       [EXISTS] Execute commands
│
├── 🆕 strategy_selector.py      Choose optimal strategy
├── 🆕 objective_state.py        Persist objectives to JSON
├── 🆕 cost_estimator.py         Estimate Azure costs
├── 🆕 recovery_agent.py         Research & retry failures
├── 🆕 terraform_generator.py    Generate Terraform HCL
├── 🆕 mcp_client.py             Azure MCP Server client
├── 🆕 mslearn_client.py         MS Learn search
├── 🆕 errors.py                 Exception hierarchy
├── 🆕 config.py                 Configuration management
│
└── strategies/
    ├── 🆕 base.py               Strategy interface ⚡ MAIN STUD
    ├── 🆕 azure_cli.py          Azure CLI execution
    ├── 🆕 terraform.py          Terraform execution
    ├── 🆕 mcp_server.py         MCP Server execution
    └── 🆕 custom_code.py        Python code generation

🎯 KEY INTERFACES (The "Studs")
═══════════════════════════════════════════════════════════════════════════

ExecutionStrategy (ABC)
  ├─ can_handle(context) → bool
  ├─ estimate_cost(context) → float
  ├─ execute(context) → ExecutionResult
  ├─ validate(result) → bool
  └─ rollback(result) → bool

ExecutionContext (Input)
  ├─ intent: Dict[str, Any]
  ├─ parameters: Dict[str, Any]
  ├─ resource_group: Optional[str]
  ├─ dry_run: bool
  ├─ verbose: bool
  └─ cost_limit: Optional[float]

ExecutionResult (Output)
  ├─ success: bool
  ├─ strategy: StrategyType
  ├─ outputs: Dict[str, Any]
  ├─ resources_created: List[str]
  ├─ cost_estimate: Optional[float]
  ├─ execution_time: float
  └─ error: Optional[str]

📊 EXECUTION FLOW
═══════════════════════════════════════════════════════════════════════════

User Request
     ↓
┌────────────────┐
│ IntentParser   │ [EXISTS] Parse natural language
└────────┬───────┘
         ↓
┌────────────────┐
│ StateManager   │ [NEW] Create objective record
└────────┬───────┘
         ↓
┌────────────────┐
│ CostEstimator  │ [NEW] Estimate cost, confirm if needed
└────────┬───────┘
         ↓
┌────────────────┐
│ StrategySelector│ [NEW] Score & select optimal strategy
└────────┬───────┘
         ↓
    ┌────┴────────────────┬──────────────┬─────────────┐
    ↓                     ↓              ↓             ↓
┌─────────┐         ┌──────────┐   ┌─────────┐  ┌──────────┐
│Azure CLI│         │Terraform │   │   MCP   │  │  Custom  │
│Strategy │         │ Strategy │   │ Server  │  │   Code   │
└────┬────┘         └────┬─────┘   └────┬────┘  └────┬─────┘
     └──────────────────┬┘────────────┬─┘────────────┘
                        ↓
                ┌───────────────┐
                │ExecutionResult│
                └───────┬───────┘
                        ↓
                   ┌────┴─────┐
                   │ Success? │
                   └────┬─────┘
                    ┌───┴───┐
                   NO      YES
                    ↓        ↓
            ┌──────────┐  ┌────────┐
            │ Recovery │  │ Return │
            │  Agent   │  │Success │
            └──────────┘  └────────┘

💰 COST ESTIMATION
═══════════════════════════════════════════════════════════════════════════

CostEstimator
  ├─ estimate_intent()      General intent → cost
  ├─ estimate_vm()          VM cost calculation
  ├─ estimate_storage()     Storage cost calculation
  └─ estimate_terraform()   Parse HCL → cost

Azure Pricing API
  ├─ VM hourly rates by size/region
  ├─ Storage monthly rates by type/region
  └─ Cached pricing data

🔄 RECOVERY AGENT
═══════════════════════════════════════════════════════════════════════════

RecoveryAgent
  ├─ analyze_failure()      Error → Recovery plan
  │   ├─ Error analysis (Claude API)
  │   ├─ MS Learn search
  │   └─ Generate recovery plan
  │
  └─ attempt_recovery()     Execute recovery
      ├─ retry              Try again same way
      ├─ modify_params      Change parameters
      ├─ change_strategy    Try different strategy
      └─ escalate           Needs human intervention

📝 STATE PERSISTENCE
═══════════════════════════════════════════════════════════════════════════

~/.azlin/azdoit/state/{uuid}.json
{
  "objective_id": "uuid",
  "user_request": "create 3 VMs",
  "intent": {...},
  "status": "completed|failed|in_progress",
  "selected_strategy": "terraform",
  "execution_results": [...],
  "resources_created": ["/subscriptions/.../vms/test-1", ...],
  "total_cost": 36.50,
  "created_at": "2025-10-20T...",
  "updated_at": "2025-10-20T..."
}

⚙️ CONFIGURATION
═══════════════════════════════════════════════════════════════════════════

~/.azlin/azdoit/config.json
{
  "strategy_preferences": {
    "prefer_terraform": false,
    "max_cost": 100.0
  },
  "cost_estimation": {
    "enabled": true,
    "confirmation_threshold": 10.0
  },
  "recovery": {
    "enabled": true,
    "max_attempts": 3
  }
}

🚨 ERROR HIERARCHY
═══════════════════════════════════════════════════════════════════════════

AzDoItError (base)
├── IntentParseError
├── StrategyError
│   ├── NoStrategyFoundError
│   ├── StrategyExecutionError
│   ├── AzureCLIError
│   ├── TerraformError
│   ├── MCPError
│   └── CodeGenerationError
├── StateError
│   └── ObjectiveNotFoundError
├── CostEstimationError
├── RecoveryError
└── ValidationError

🧪 TESTING STRATEGY
═══════════════════════════════════════════════════════════════════════════

Unit Tests (>80% coverage)
  ├─ test_strategy_selector.py
  ├─ test_objective_state.py
  ├─ test_cost_estimator.py
  ├─ test_recovery_agent.py
  ├─ test_terraform_generator.py
  ├─ test_mcp_client.py
  ├─ test_mslearn_client.py
  └─ strategies/
      ├─ test_azure_cli.py
      ├─ test_terraform.py
      ├─ test_mcp_server.py
      └─ test_custom_code.py

Integration Tests (Critical paths)
  ├─ test_end_to_end.py
  ├─ test_strategy_selection.py
  ├─ test_recovery_flow.py
  └─ test_cost_estimation.py

📅 IMPLEMENTATION TIMELINE
═══════════════════════════════════════════════════════════════════════════

Week 1: Foundation
  ✓ errors.py
  ✓ strategies/base.py
  ✓ objective_state.py

Week 2: Core Strategies
  ✓ strategies/azure_cli.py
  ✓ strategy_selector.py
  ✓ strategies/terraform.py

Week 3: Supporting Services
  ✓ terraform_generator.py
  ✓ cost_estimator.py
  ✓ mcp_client.py
  ✓ mslearn_client.py

Week 4: Advanced Features
  ✓ strategies/mcp_server.py
  ✓ strategies/custom_code.py
  ✓ recovery_agent.py

Week 5: Integration
  ✓ CLI integration (cli.py)
  ✓ config.py
  ✓ End-to-end testing

📈 METRICS & SUCCESS CRITERIA
═══════════════════════════════════════════════════════════════════════════

Functionality
  ✓ All 4 strategies working
  ✓ Strategy selection >90% accurate
  ✓ State persistence reliable
  ✓ Cost estimation ±10% accuracy
  ✓ Recovery success >50% (retryable failures)

Quality
  ✓ >80% unit test coverage
  ✓ All critical paths integration tested
  ✓ Type checking passes
  ✓ Zero security vulnerabilities

User Experience
  ✓ Natural language works intuitively
  ✓ Cost confirmations prevent overruns
  ✓ Error messages actionable
  ✓ Recovery transparent
  ✓ Dry-run accurate

🎯 PHILOSOPHY ALIGNMENT
═══════════════════════════════════════════════════════════════════════════

Bricks & Studs
  ✅ Self-contained modules
  ✅ Stable interfaces (ExecutionStrategy)
  ✅ Clear boundaries
  ✅ Regeneratable from contracts

Ruthless Simplicity
  ✅ Every module justified
  ✅ Minimal abstractions
  ✅ No premature optimization
  ✅ Observable results

Quality Over Speed
  ✅ Full type hints
  ✅ Comprehensive tests
  ✅ Real implementations (no stubs)
  ✅ Error handling complete

📊 ESTIMATED EFFORT
═══════════════════════════════════════════════════════════════════════════

Code:          2,500-3,000 LOC
Tests:         2,000 LOC
Documentation: 7,761 lines (complete)
Timeline:      5 weeks
Risk:          Low (independently testable)
Impact:        High (10+ new capabilities)

═══════════════════════════════════════════════════════════════════════════
Status: ✅ Design Complete - Ready for Review
═══════════════════════════════════════════════════════════════════════════
